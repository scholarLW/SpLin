\name{RapidRegister}
\alias{RapidRegister}
\alias{rapidregister}

\title{
	Manual registration function.
}

\description{
	This manual verification-based registration method operates through the following workflow: (a) performing initial alignment by setting iterative points according to mask contour morphology, (b) selecting optimal parameters for refinement based on alignment results, and (c) generating the final registered solution.
}

\usage{
	RapidRegister(json, cellPointsFile, markingPointsImage, markingPoints_MASKJSON, cellPointsImage, cellPoints_MASKJSON, idjson, transform = NULL, kpixel = 10, epsilon = 0.001, interval = 0.05, intervalAngle = 30, up = 0, down = 0, left = 0, right = 0, theta = 0, spatialpointsize = 0.1, Signal = FALSE)
}

\arguments{
  \item{json}{       
     This is a Labelme JSON result file for images containing the labels "Nei" and "Wai", or additionally including the "Sign" label after adjustment.
  }
  \item{cellPointsFile}{       
     A text file generated by the R package SpLin, containing a matrix without row or column names, with values derived from points in the signal matrix. The file is typically named "cellPoints.txt".
  }
  \item{markingPointsImage}{       
     The mask image of the annotated region.
  }  
  \item{markingPoints_MASKJSON}{       
     The Labelme JSON file for the initial iteration points of the mask image of the annotated region.
  }  
  \item{cellPointsImage}{       
     The mask image of the signal matrix contour.
  }  
  \item{cellPoints_MASKJSON}{       
     The Labelme JSON file for the initial iteration points of the mask image of the signal matrix.
  }   
  \item{idjson}{       
     The dimension information file for the image, typically named "Dimensions.txt".
  }  
  \item{transform}{       
     If the contour of the annotated points is in a mirror relationship with the contour of the expression matrix, adjust the relationship of the annotated points' contour based on the contour of the expression matrix. The parameter can be "horizontal," "vertical," or NULL.
  }  
  \item{kpixel}{       
     The pixel interval, used to evaluate the registration coefficient, defaults to 10.
  }  
  \item{epsilon}{       
     The error ratio caused by manual Lasso and annotation, which defaults to 0.001.
  }      
  \item{interval}{       
     The radius interval of concentric circles.
  }   
  \item{intervalAngle}{       
     The angular interval, used for drawing lines at each specified angle.
  }   
  \item{up}{       
     The positive direction of the Y-axis, where positive values indicate stretching outward from the concentric circles, and negative values indicate scaling inward towards the concentric circles.
  }   
  \item{down}{       
     The negative direction of the Y-axis, where positive values indicate stretching outward from the concentric circles, and negative values indicate scaling inward towards the concentric circles.
  }   
  \item{left}{       
     The negative direction of the X-axis, where positive values indicate stretching outward from the concentric circles, and negative values indicate scaling inward towards the concentric circles.
  }   
  \item{right}{       
     The positive direction of the X-axis, where positive values indicate stretching outward from the concentric circles, and negative values indicate scaling inward towards the concentric circles.
  }   
  \item{theta}{       
     The rotation angle, where positive values indicate counterclockwise rotation, and negative values indicate clockwise rotation.
  } 
   \item{spatialpointsize}{       
     The size of spatial scatter points.
  }
  \item{Signal}{       
     Whether it is an image formed by the signal matrix.
  }  
}
\author{
	Wen Luo(design, implementation, testing)
}
\examples{
	json = 'SignalMatrix/Adjusted_signalMatrix.json'
	cellPointsFile = 'SignalMatrix/cellPoints.txt' 
	markingPointsImage = 'SignalMatrix/markingPoints_MASK.png'
	markingPoints_MASKJSON = 'SignalMatrix/markingPoints_MASK.json'
	cellPointsImage = 'SignalMatrix/cellPoints_MASK.png'
	cellPoints_MASKJSON = 'SignalMatrix/cellPoints_MASK.json' 	
	idjson = 'SignalMatrix/image_dimensions.json'
	transform = NULL
	kpixel = 10  
	epsilon = 0.001 
	interval = 0.05 
	intervalAngle = 30 
	up = 0
	down = 0
	left = 0
	right = 0
	theta = 0
	spatialpointsize = 2
	library(SpLin)
	RapidRegister(json, cellPointsFile, markingPointsImage, markingPoints_MASKJSON, cellPointsImage, cellPoints_MASKJSON, idjson, transform = transform, kpixel = kpixel, epsilon = epsilon, interval = interval, intervalAngle = intervalAngle, up = up, down = down, left = left, right = right, theta = theta, spatialpointsize = spatialpointsize, Signal = TRUE)
}